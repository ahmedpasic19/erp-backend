generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               users     @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         users    @relation(fields: [userId], references: [id])

  @@index([userId], map: "Session_userId_fkey")
}

model users {
  id                 String               @id @default(cuid())
  name               String?
  email              String?              @unique
  password           String
  createdAt          DateTime             @default(now())
  emailVerified      DateTime?
  image              String?
  updatedAt          DateTime             @default(now()) @updatedAt
  current_company_id Int?
  accounts           Account[]
  sessions           Session[]
  companies          users_in_companies[]
  type               user_type            @default(USER)
  offers_client      offers[]             @relation("client")
  offers_user        offers[]             @relation("worker")
  invoices_client    invoices[]           @relation("client_invoices")
  invoices_user      invoices[]           @relation("worker_invoices")
}

enum user_type {
  USER
  CLIENT
}

model articles {
  id                Int                @id @default(autoincrement())
  name              String
  code              String
  price_without_vat Float              @default(0)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @default(now())
  companies_id      Int
  price_with_vat    Float              @default(0)
  company           companies          @relation(fields: [companies_id], references: [id])
  offer_articles    offer_articles[]
  invoice_articles  invoice_articles[]

  @@index([companies_id], map: "articles_companies_id_fkey")
}

model companies {
  id       Int                  @id @default(autoincrement())
  name     String
  articles articles[]
  storages storages[]
  users    users_in_companies[]
  offers   offers[]
  invoices invoices[]
}

model users_in_companies {
  user_id    String
  company_id Int
  company    companies @relation(fields: [company_id], references: [id])
  user       users     @relation(fields: [user_id], references: [id])

  @@id([user_id, company_id])
  @@index([company_id], map: "users_in_companies_company_id_fkey")
}

model storages {
  id           Int       @id @default(autoincrement())
  name         String
  companies_id Int
  created_at   DateTime  @default(now())
  company      companies @relation(fields: [companies_id], references: [id])

  @@index([companies_id], map: "storages_companies_id_fkey")
}

model currencies {
  id       Int        @id @default(autoincrement())
  name     String
  course   Float
  symbol   String
  offers   offers[]
  invoices invoices[]
}

model offers {
  id                Int      @id @default(autoincrement())
  offer_number      String   @default("0000")
  offer_total       Float    @default(0)
  vat               Float    @default(0)
  vat_value         Float    @default(0)
  total_discount    Float    @default(0)
  date_of_order     DateTime @default(now())
  delivery_due_date DateTime @default(now())
  payment_due_date  DateTime @default(now())
  worker            users    @relation(name: "worker", fields: [worker_id], references: [id])
  valid             Boolean  @default(true) // used for logical delete

  client         users            @relation(name: "client", fields: [client_id], references: [id])
  company        companies        @relation(fields: [companies_id], references: [id])
  currency       currencies       @relation(fields: [currencies_id], references: [id])
  offer_articles offer_articles[]

  companies_id  Int
  client_id     String
  currencies_id Int
  worker_id     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model offer_articles {
  id                     Int    @id @default(autoincrement())
  name                   String
  code                   String
  base_price             Float  @default(0)
  base_price_with_vat    Float  @default(0)
  selling_price          Float  @default(0) // base_price * amount - discount (%)
  selling_price_with_vat Float  @default(0) // base_price_with_vat * amount - discount (%) // This is the price product is sold for
  amount                 Int    @default(0)
  vat                    Float  @default(0) // percentage
  vat_value              Float  @default(0)
  discount               Float  @default(0)
  discount_value         Float  @default(0)

  article     articles @relation(fields: [articles_id], references: [id])
  articles_id Int
  offer       offers   @relation(fields: [offers_id], references: [id])
  offers_id   Int
}

model invoices {
  id                Int      @id @default(autoincrement())
  invoice_number    String   @default("0000")
  invoice_total     Float    @default(0)
  vat               Float    @default(0)
  vat_value         Float    @default(0)
  total_discount    Float    @default(0)
  date_of_order     DateTime @default(now())
  delivery_due_date DateTime @default(now())
  payment_due_date  DateTime @default(now())
  worker            users    @relation(name: "worker_invoices", fields: [worker_id], references: [id])
  valid             Boolean  @default(true) // used for logical delete

  client           users              @relation(name: "client_invoices", fields: [client_id], references: [id])
  company          companies          @relation(fields: [companies_id], references: [id])
  currency         currencies         @relation(fields: [currencies_id], references: [id])
  invoice_articles invoice_articles[]

  companies_id  Int
  client_id     String
  currencies_id Int
  worker_id     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model invoice_articles {
  id                     Int    @id @default(autoincrement())
  name                   String
  code                   String
  base_price             Float  @default(0)
  base_price_with_vat    Float  @default(0)
  selling_price          Float  @default(0) // base_price * amount - discount (%)
  selling_price_with_vat Float  @default(0) // base_price_with_vat * amount - discount (%) // This is the price product is sold for
  amount                 Int    @default(0)
  vat                    Float  @default(0) // percentage
  vat_value              Float  @default(0)
  discount               Float  @default(0)
  discount_value         Float  @default(0)

  article     articles @relation(fields: [articles_id], references: [id])
  articles_id Int
  invoice     invoices @relation(fields: [invoices_id], references: [id])
  invoices_id Int
}
